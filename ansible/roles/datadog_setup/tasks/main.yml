---
# ------------------------------------------------------------------------------
# Role: datadog_setup
# Description:
# Installs the Datadog Agent in the k3s cluster to collect metrics, 
# logs, and traces for monitoring and observability. 

# Tasks Performed:
#   - Adds the Datadog Helm repository to the local Helm configuration.
#   - Updates Helm repositories to fetch the latest chart definitions.
#   - Renders a values file (`datadog-values.yaml`) from a Jinja2 template using 
#     variables defined in `group_vars/all.yml`.
#   - Installs the Datadog Agent using the official Helm chart with the rendered 
#     values file for configuration overrides.

# Notes:
#   - All customizable values (API key, cluster name, tags, logging options, etc.)
#     are centrally defined in `group_vars/all.yml`.
#   - The values file is rendered to `/tmp/datadog-values.yaml` on the target host 
#     before Helm installation.
# ------------------------------------------------------------------------------



- name: Add Datadog Helm repository
  command: helm repo add datadog https://helm.datadoghq.com

- name: Update Helm repositories
  command: helm repo update



- name: Render the Datadog values file
  template:
    src: template/datadog-values.yaml.j2
    dest: /tmp/datadog-values.yaml
    mode: '0644'

- name: Install Datadog Agent via Helm
  kubernetes.core.helm:
    name: datadog
    chart_ref: datadog/datadog
    release_namespace: "{{ k3s_namespace }}"
    values_files:
      -  /tmp/datadog-values.yaml



# - name: Wait for Datadog Agent pod to be created
#   shell: |
#     kubectl get pods -n {{ k8_namespace }} -l app=datadog --no-headers
#   register: datadog_pods_raw
#   retries: 10
#   delay: 10
#   until: datadog_pods_raw.stdout_lines | length > 0

# - name: Get Datadog Agent pod status
#   shell: |
#     kubectl get pods -n {{ k8_namespace }} -l app=datadog -o jsonpath="{.items[0].status.phase}"
#   register: datadog_status
#   changed_when: false
#   failed_when: datadog_status.stdout not in ["Running", "Succeeded"]

# - name: Fail if Datadog Agent pod is not healthy
#   fail:
#     msg: "Datadog Agent pod is not in a healthy state. Current state: {{ datadog_status.stdout }}"
#   when: datadog_status.stdout not in ["Running", "Succeeded"]

