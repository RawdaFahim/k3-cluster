# ------------------------------------------------------------------------------
# Role: deploy_helm
# Description: Deploys a full Helm chart to the Kubernetes cluster. This includes:
#   - Deploying the Helm chart located in `../helm-deployment`, which bundles:
#       - Python application with APM agent
#       - Nginx reverse proxy
#       - Istio Gateway and VirtualService configuration
#   - Using the Helm module to install and configure resources declaratively.
#   - Waiting for Istio components to become ready.
#   - Verifying that the required deployments (`nginx-load-balancer` and `python-sample`) are successfully created.
#
# This role replaces manual kubectl manifest application with a Helm-based
# approach for more modular, reusable, and version-controlled deployments.
# ------------------------------------------------------------------------------

- name: Sync Helm chart directory to remote
  synchronize:
    src: "{{ playbook_dir }}/../helm-deployment/"
    dest: "/tmp/helm-deployment/"
    recursive: yes
  delegate_to: localhost
  become: no
  run_once: true
- name: Debug variables
  debug:
    msg:
      - "k8s_namespace: {{ k8s_namespace }}"
      - "python_app.service_name: {{ python_app.service_name }}"
      - "nginx_app.service_name: {{ nginx_app.service_name }}"


- name: Deploy application using Helm chart
  shell: |
    helm upgrade -i --reset-values \
      --set global.namespace={{ k8s_namespace }} \
      --set global.label.python_app_service={{ python_app.service_name }} \
      --set global.label.nginx_load_balancer={{ nginx_app.service_name }} \
      full-helm-deployment /tmp/helm-deployment
  args:
    chdir: /tmp


- name: Wait for app pods to be ready
  shell: |
    kubectl rollout status deployment {{ istio.ingress_gateway.name }} -n {{ k8s_namespace }}
    kubectl rollout status deployment istiod -n {{ k8s_namespace }}


- name: Get Kubernetes deployments using kubectl
  command: kubectl get deployments -n {{ k8s_namespace }} -o json
  register: result
  changed_when: false

- name: Extract deployment names from the result
  set_fact:
    deployments: "{{ result.stdout | from_json | json_query('items[].metadata.name') }}"

- name: Debug nginx service name
  debug:
    var: nginx_app.service_name

- name: Verify specific deployments are created
  assert:
    that:
      - nginx_app.name in deployments
      - python_app.name in deployments
    fail_msg: "One or more required deployments were not created"
    success_msg: "All required deployments were successfully created"


